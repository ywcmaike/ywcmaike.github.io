<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3 | Yifan Wang - ETH Zurich</title>
    <link>https://yifita.github.io/publication_types/3/</link>
      <atom:link href="https://yifita.github.io/publication_types/3/index.xml" rel="self" type="application/rss+xml" />
    <description>3</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 06 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://yifita.github.io/img/icon-192.png</url>
      <title>3</title>
      <link>https://yifita.github.io/publication_types/3/</link>
    </image>
    
    <item>
      <title>Input-level Inductive Biases for 3D Reconstruction</title>
      <link>https://yifita.github.io/publication/iib/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://yifita.github.io/publication/iib/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Advances in Neural Rendering</title>
      <link>https://yifita.github.io/publication/neural_rendering_review/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://yifita.github.io/publication/neural_rendering_review/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Geometry-Consistent Neural Shape Representation with Implicit Displacement Fields</title>
      <link>https://yifita.github.io/publication/idf/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://yifita.github.io/publication/idf/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#overview-video&#34;&gt;Overview video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#method&#34;&gt;Method&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#implicit-displacement-fields&#34;&gt;Implicit Displacement Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#networks&#34;&gt;Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#transferability&#34;&gt;Transferability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#future-work&#34;&gt;Future work&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;overview-video&#34;&gt;Overview video&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/fl4Rje8HM3I&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;How to best represent 3D geometry in neural networks?
Objects we encounter in real life distinguish themselves with their intricate geometric details.
Is there a compact way to capture these intricacies and allow efficient downstream tasks?&lt;/p&gt;

&lt;p&gt;Implicit neural networks, also known as coordinate-based networks, has gained a lot of attraction due to their theoretically infinite resolution.
But in reality, due to the &lt;a href=&#34;https://arxiv.org/abs/1806.08734&#34; target=&#34;_blank&#34;&gt;spectral bias&lt;/a&gt; of neural nets, high-frequency signals (surface details) still get lost.&lt;/p&gt;

&lt;p&gt;The research community combat this issue focusing two aspects: spatial partition and frequency transform.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Spatial Partition&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Frequency Transform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Divides the holistic implicit function into many simpler ones located in cells of some spatial structures&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Transforms the signal passing through the network to a high-frequency via either periodic activation functions or Fourier Transformation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;DLS&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, NGLOD&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SIREN&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, Position Encoding&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Incompact, memory demands grows cubically with the spatial resolution, may have issues at the cell boundary&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Hard to train, local minima&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;method&#34;&gt;Method&lt;/h2&gt;

&lt;h3 id=&#34;implicit-displacement-fields&#34;&gt;Implicit Displacement Fields&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;overview.jpg&#34; alt=&#34;overview&#34; /&gt;
We decompose the 3D geometry into a smooth base surface, represented as a low-frequency signed distance function, and a continuous high-frequency &lt;strong&gt;implicit displacement field&lt;/strong&gt;, which offsets the base iso-surface along the normal direction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ðŸ’¡ Frequency-based partition of the 3D geometry &amp;ndash; decompose the shape into a smooth base surface, represented as a low-frequency signed distance function, and a continuous high-frequency &lt;strong&gt;implicit displacement field&lt;/strong&gt;, which offsets the base iso-surface along the normal direction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our idea took inspiration from &lt;a href=&#34;https://en.wikipedia.org/wiki/Displacement_mapping&#34; target=&#34;_blank&#34;&gt;Displacement Mapping&lt;/a&gt;, a classic technique in Computer Graphics to model surface details.
In this image below, the bumps on the sphere is added by offsetting samples of the sphere along the normal directions by a distance obtained (with interpolation) from the height map on the top-left.






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8/keyshot_displacement_maps_3.jpg&#34; data-caption=&#34;source: https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8&#34;&gt;

&lt;img src=&#34;https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8/keyshot_displacement_maps_3.jpg&#34; alt=&#34;source: https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Displacement Mapping: adding details to a sphere.&lt;/h4&gt;
  &lt;p&gt;
    source: &lt;a href=&#34;https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8&#34; target=&#34;_blank&#34;&gt;https://www.yankodesign.com/images/design_news/2019/04/how-to-create-realistic-textures-with-displacement-maps-in-keyshot-8&lt;/a&gt;
    
    
    
  &lt;/p&gt; 
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Displacement mapping is discrete and defined on the surface.
So in this paper, we are tasked to extend the definition of displacement mapping to the continous $\mathbb{R}^3$ domain.
This is illustratively shown in the figure below (please check our paper for the formal definition and proofs).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implicit displacement field $d: \mathbb{R}^3 \rightarrow \mathbb{R}$ maps two equi-isosurfaces $\mathcal{S}_{\tau}$ and $\hat{\mathcal{S}}_{\tau}$; height map in the classic displacement mapping is a special case $\tau_{0}$.&lt;/p&gt;

&lt;p&gt;Equi-isosurface mapping: $f\left(\mathbf{x}\right) = \hat{f}\left(\mathbf{x}+d\mathbf{n}\right)$ and $\hat{f}\left(\hat{\mathbf{x}}\right) = f\left(\hat{\mathbf{x}}+\hat{d}\mathbf{n}\right)$.&lt;/p&gt;
&lt;/blockquote&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;1D-overview.jpg&#34; &gt;

&lt;img src=&#34;1D-overview.jpg&#34; alt=&#34;&#34; width=&#34;480px&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Implicit displacement field in 1D.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h3 id=&#34;networks&#34;&gt;Networks&lt;/h3&gt;

&lt;p&gt;How do we separate the low-frequency base SDF and high-frequency implicit displacement field?
We notice that this is at its core a &lt;em&gt;frequency decomposition&lt;/em&gt; of the geometry.
At the same time, we observe that the output signal&amp;rsquo;s frequency of SIRENs (networks with period activation functions) can be controlled easily with their frequency paramter $\omega$ in the sine activation $x\mapsto\sin\left(\omega x\right)$.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ðŸ’¡ We separate the low-frequency base and high-frequency detail in an unsupervised manner by leveraging SIREN&amp;rsquo;s inherent frequency capacity, which can be modulated conveniently by the hyper-parameter $\omega$ in the sine activation $x\mapsto\sin\left(\omega x\right)$.
In other words, we approximate base SDF with a low-frequency SIREN (e.g. $\omega=15$) and the displacement field with a high-frequency SIREN (e.g. $\omega=60$ ).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s denote the base SDF network as $\mathcal{N}^{\omega_B}$ and the displacement network as $\mathcal{N}^{\omega_D}$.
The detailed SDF (the one we want to approximate) is composed the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;compute the normal direction $\mathbf{n} = \frac{\nabla \mathcal{N}^{\omega_B}\left(\mathbf{x}\right)}{\lVert\nabla \mathcal{N}^{\omega_B}\left(\mathbf{x}\right)\rVert}$,&lt;/li&gt;
&lt;li&gt;compute the displacement distance $\hat{d} = \mathcal{N}^{\omega_D}\left(\mathbf{x}\right)$,&lt;/li&gt;
&lt;li&gt;compute the SDF at the displaced position $f(\mathbf{x}+\hat{d}\mathbf{n}) = \mathcal{N}^{\omega_B}\left(\mathbf{x}+\hat{d}\mathbf{n}\right)$, which per our definition is equal to the detail SDF $\hat{f}(\mathbf{x})$.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that since both $\mathcal{N}^{\omega_B}$ and $\mathcal{N}^{\omega_D}$ are included in the steps, we can train them together by either directly comparing $\hat{f}(\mathbf{x})$ with the ground truth SDF or indirectly by solving eikonal constraints with boundary conditions.&lt;/p&gt;

&lt;p&gt;In the paper, we also introduced 3 other techniques that we embedded in the network and training to improve the result and training stability. Go check them out! ðŸ˜‰&lt;/p&gt;

&lt;h3 id=&#34;transferability&#34;&gt;Transferability&lt;/h3&gt;

&lt;p&gt;One advantage of using classic displacement mapping to create surface details
is that once the mapping, known as surface parameterization, from the base surface to the height map
is created, the displacement is independent of deformations of the base surface. We emulate this effect for IDF by replacing the coordinates input to the displacement net, which is obviously non-transferable as it&amp;rsquo;s bound to the global coordinate frame, with transferable features.&lt;/p&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;transferable_net.png&#34; &gt;

&lt;img src=&#34;transferable_net.png&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Comparison between transferable and non-transferable implicit displacement.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;


&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s first look at the detail representation compared to other methods:






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;evaluation_table.png&#34; &gt;

&lt;img src=&#34;evaluation_table.png&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;


&lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; &gt;
  &lt;h4&gt;Quantitative evaluation. Note that NGLOD (LOD6) requires storing more than 300 times as many parameters as our model.&lt;/h4&gt;
  
&lt;/figcaption&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s some visual examples.






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;camera_compressed.jpg&#34; &gt;

&lt;img src=&#34;camera_compressed.jpg&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;dragon_wing_compressed.jpg&#34; &gt;

&lt;img src=&#34;dragon_wing_compressed.jpg&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;For detail transfer:






&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;shorts_compressed.jpg&#34; &gt;

&lt;img src=&#34;shorts_compressed.jpg&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;







&lt;figure&gt;

  &lt;a data-fancybox=&#34;&#34; href=&#34;faces_compressed.jpg&#34; &gt;

&lt;img src=&#34;faces_compressed.jpg&#34; alt=&#34;&#34; &gt;
&lt;/a&gt;

&lt;/figure&gt;
&lt;/p&gt;

&lt;h2 id=&#34;future-work&#34;&gt;Future work&lt;/h2&gt;

&lt;p&gt;We hope to explore further in the realm of implicit shape editting! I&amp;rsquo;m looking forward to your inputs and ideas for collaborations.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3&#34;&gt;Chabra, Rohan, et al. &amp;ldquo;Deep local shapes: Learning local sdf priors for detailed 3d reconstruction.&amp;rdquo; European Conference on Computer Vision. Springer, Cham, 2020.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;Takikawa, Towaki, et al. &amp;ldquo;Neural geometric level of detail: Real-time rendering with implicit 3D shapes.&amp;rdquo; arXiv preprint arXiv:2101.10994 (2021).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;Sitzmann, Vincent, et al. &amp;ldquo;Implicit neural representations with periodic activation functions.&amp;rdquo; Advances in Neural Information Processing Systems 33 (2020).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Mildenhall, Ben, et al. &amp;ldquo;Nerf: Representing scenes as neural radiance fields for view synthesis.&amp;rdquo; European Conference on Computer Vision. Springer, Cham, 2020.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;^&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
